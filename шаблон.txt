https://duckduckgo.com/?q=DuckDuckGo+AI+Chat&ia=chat&duckai=1
https://labs.perplexity.ai/
https://github.com/Flamewalker159/Module4.git
-- üì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶

-- –¢–∞–±–ª–∏—Ü–∞: –ì–æ—Å—Ç–∏
CREATE TABLE guests (
    guest_id SERIAL PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    birth_date DATE,
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    passport_number CHAR(10),
    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞: –¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤
CREATE TABLE room_types (
    room_type_id SERIAL PRIMARY KEY,
    type_name VARCHAR(50),
    price_per_night NUMERIC(10, 2)
);

-- –¢–∞–±–ª–∏—Ü–∞: –ù–æ–º–µ—Ä–∞
CREATE TABLE rooms (
    room_id SERIAL PRIMARY KEY,
    room_number VARCHAR(10) UNIQUE NOT NULL,
    room_type_id INT REFERENCES room_types(room_type_id),
    status VARCHAR(20) CHECK (status IN ('–°–≤–æ–±–æ–¥–µ–Ω', '–ó–∞–Ω—è—Ç', '–ù–∞–∑–Ω–∞—á–µ–Ω –∫ —É–±–æ—Ä–∫–µ', '–ß–∏—Å—Ç—ã–π', '–ì—Ä—è–∑–Ω—ã–π'))
);

-- –¢–∞–±–ª–∏—Ü–∞: –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    full_name VARCHAR(100),
    role VARCHAR(50),
    hire_date DATE
);

-- –¢–∞–±–ª–∏—Ü–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
CREATE TABLE bookings (
    booking_id SERIAL PRIMARY KEY,
    guest_id INT REFERENCES guests(guest_id),
    room_id INT REFERENCES rooms(room_id),
    check_in_date DATE,
    check_out_date DATE,
    total_amount NUMERIC(10, 2),
    payment_status BOOLEAN DEFAULT FALSE
);

-- –¢–∞–±–ª–∏—Ü–∞: –£–±–æ—Ä–∫–∞
CREATE TABLE cleaning (
    cleaning_id SERIAL PRIMARY KEY,
    room_id INT REFERENCES rooms(room_id),
    employee_id INT REFERENCES employees(employee_id),
    cleaning_date DATE,
    status VARCHAR(20) CHECK (status IN ('–ù–∞–∑–Ω–∞—á–µ–Ω–∞', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'))
);

-- üìä –ê–ì–†–ï–ì–ê–¢–ù–´–ï –ó–ê–ü–†–û–°–´ –° –§–û–†–ú–£–õ–ê–ú–ò

-- 1. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞
-- (–∫–æ–ª-–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –Ω–æ—á–µ–π / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π * 100)
SELECT 
    ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM rooms), 2) AS occupancy_percent
FROM bookings
WHERE CURRENT_DATE BETWEEN check_in_date AND check_out_date;

-- 2. ADR (—Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥)
SELECT 
    ROUND(SUM(total_amount) / SUM(DATE_PART('day', check_out_date - check_in_date)), 2) AS adr
FROM bookings;

-- 3. RevPAR = ADR * –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
WITH 
    stats AS (
        SELECT 
            SUM(total_amount) AS revenue,
            SUM(DATE_PART('day', check_out_date - check_in_date)) AS nights_sold,
            (SELECT COUNT(*) FROM rooms) AS total_rooms
        FROM bookings
    )
SELECT 
    ROUND((revenue / total_rooms), 2) AS revpar
FROM stats;

-- üõ† –í–°–¢–ê–í–ö–ê –î–ê–ù–ù–´–•

INSERT INTO guests (full_name, birth_date, phone, email, passport_number)
VALUES ('–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω', '1990-01-01', '+7 999 123-45-67', 'ivan@example.com', '1234567890');

INSERT INTO room_types (type_name, price_per_night)
VALUES ('–û–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–π', 2500.00), ('–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π', 4000.00);

INSERT INTO rooms (room_number, room_type_id, status)
VALUES ('101', 1, '–°–≤–æ–±–æ–¥–µ–Ω'), ('102', 2, '–ì—Ä—è–∑–Ω—ã–π');

INSERT INTO employees (full_name, role, hire_date)
VALUES ('–°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è', '–£–±–æ—Ä—â–∏—Ü–∞', '2022-06-01');

INSERT INTO bookings (guest_id, room_id, check_in_date, check_out_date, total_amount, payment_status)
VALUES (1, 1, '2025-04-01', '2025-04-05', 10000.00, TRUE);

INSERT INTO cleaning (room_id, employee_id, cleaning_date, status)
VALUES (2, 1, '2025-04-06', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞');

üìå –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:
.     - –õ—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫—Ä–æ–º–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: a.c ‚Üí abc, a1c)
^     - –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ^abc ‚Üí abc123, –Ω–æ –Ω–µ 123abc)
$     - –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: abc$ ‚Üí 123abc)
[]    - –û–¥–∏–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: [abc] ‚Üí a –∏–ª–∏ b –∏–ª–∏ c)
[^]   - –õ—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: [^0-9] ‚Üí –Ω–µ —Ü–∏—Ñ—Ä–∞)
-     - –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: [0-9] ‚Üí —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9)
()    - –ì—Ä—É–ø–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: (abc){2} ‚Üí abcabc)
|     - –ò–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: abc|123 ‚Üí abc –∏–ª–∏ 123)

üî¢ –ö–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:
*     - 0 –∏–ª–∏ –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: a* ‚Üí "", a, aa...)
+     - 1 –∏–ª–∏ –±–æ–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: a+ ‚Üí a, aa...)
?     - 0 –∏–ª–∏ 1 —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: a? ‚Üí "" –∏–ª–∏ a)
{n}   - –†–æ–≤–Ω–æ n –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: a{3} ‚Üí aaa)
{n,}  - –ù–µ –º–µ–Ω—å—à–µ n (–Ω–∞–ø—Ä–∏–º–µ—Ä: a{2,} ‚Üí aa, aaa...)
{n,m} - –û—Ç n –¥–æ m –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: a{2,4} ‚Üí aa, aaa, aaaa)

üî† –ö–ª–∞—Å—Å—ã —Å–∏–º–≤–æ–ª–æ–≤:
\d   - –¶–∏—Ñ—Ä–∞ (—Ä–∞–≤–Ω–æ [0-9])
\D   - –ù–ï —Ü–∏—Ñ—Ä–∞
\w   - –ë—É–∫–≤–∞, —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ _ (—Ä–∞–≤–Ω–æ [A-Za-z0-9_])
\W   - –í—Å—ë –∫—Ä–æ–º–µ \w
\s   - –ü—Ä–æ–±–µ–ª, —Ç–∞–±—É–ª—è—Ü–∏—è –∏ —Ç.–¥.
\S   - –ù–ï –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
üìÖ –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
var regex = @"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d{2}$";
üî¢ –ü–∞—Å–ø–æ—Ä—Ç –†–§ (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: 10 —Ü–∏—Ñ—Ä)
var regex = @"^\d{10}$";
üìÅ –ù–æ–º–µ—Ä –ò–°–•. –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–°–•-1234/–ê")
var regex = @"^–ò–°–•-\d{4}/[–ê-–ØA-Z]$";
üßæ –ù–æ–º–µ—Ä –û–ì–†–ù (13 —Ü–∏—Ñ—Ä)
var regex = @"^\d{13}$";
üí≥ –ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –±–µ–∑)
var regex = @"^(\d{4}\s?){4}$";
üåê URL
var regex = @"^(https?:\/\/)?([\w\-]+\.)+[\w\-]{2,}(\/[\w\-._~:/?#[\]@!$&'()*+,;=]*)?$";
üîê –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º—É–º 1 –±—É–∫–≤–∞, 1 —Ü–∏—Ñ—Ä–∞ –∏ 1 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª)
var regex = @"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$";
üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –†–§ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê123–í–° 77)
var regex = @"^[–ê-–Ø]{1}\d{3}[–ê-–Ø]{2}\s?\d{2,3}$";
üíº –ò–ù–ù —Ñ–∏–∑. –ª–∏—Ü–∞ (10 —Ü–∏—Ñ—Ä) –∏–ª–∏ —é—Ä. –ª–∏—Ü–∞ (12 —Ü–∏—Ñ—Ä)
var regex = @"^\d{10}(\d{2})?$";

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using Avalonia.Controls;
using Avalonia.Interactivity;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Newtonsoft.Json;

namespace Module4;

public partial class MainWindow : Window
{
    private string _dataFromApi = "";
    public MainWindow()
    {
        InitializeComponent();
    }
    
    private async void GetDataFromApi_OnClick(object? sender, RoutedEventArgs e)
    {
        var httpClient = new HttpClient();
        const string url = "";
        //email
        //var regex = @"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$";
        //FIO
        //var regex = @"[^–ê-–Ø–∞-—è–Å—ë\s]";
        //identityCard
        //var regex = @"[0-9]{2} [0-9]{2} [0-9]{6}";
        //inn
        //var regex = @"^\d{10}$";
        //mobilephone
        //var regex = @"^\+[0-9]+\s[0-9]{3}\s[0-9]{3}-[0-9]{2}-[0-9]{2}$";
        //snils
        //var regex = @"^[0-9]{3}-[0-9]{3}-[0-9]{3}\s[0-9]{2}$";
        try
        {
            var response = await httpClient.GetStringAsync($"http://127.0.0.1:4444/TransferSimulator/{url}");
            var data = JsonConvert.DeserializeObject<Dictionary<string,string>>(response);
            _dataFromApi = data!["value"];
            DataFromApiTextBlock.Text = _dataFromApi;
        }
        catch (Exception ex)
        {
            DataFromApiTextBlock.Text = ex.Message;
        }
    }

    private void WriteInDoc_OnClick(object? sender, RoutedEventArgs e)
    {
        const string regex = @"";
        var validationResult = Regex.IsMatch(_dataFromApi, regex);
        TestResultTextBlock.Text = validationResult ? "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã" : "—Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã";
        try
        {
            using var doc = WordprocessingDocument.Open("–¢–µ—Å—Ç–ö–µ–π—Å.docx", true); 
            var document = doc.MainDocumentPart!.Document;

            if (document.Descendants<Text>().FirstOrDefault(t => t.Text.Contains("Result 1")) != null)
                ReplaceText("Result 1", validationResult, document);
            else if(document.Descendants<Text>().FirstOrDefault(t => t.Text.Contains("Result 2")) != null)
                ReplaceText("Result 2", validationResult, document);
        }
        catch (Exception ex)
        {
            TestResultTextBlock.Text = ex.Message;
        }
    }

    private static void ReplaceText(string replaceText, bool validationResult, Document document)
        {
            foreach (var text in document.Descendants<Text>())
            {
                if(text.Text == replaceText)
                    text.Text = validationResult ? "–£—Å–ø–µ—à–Ω–æ" : "–ù–µ —É—Å–ø–µ—à–Ω–æ";
                document.Save();
            }
        }
}

<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        x:Class="Module4.MainWindow"
        Title="–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
        Height="200" Width="600" WindowStartupLocation="CenterScreen">
    <Grid ColumnDefinitions="*,*" RowDefinitions="*,*">
        <Button Grid.Column="0" Grid.Row="0" Width="210" 
                HorizontalAlignment="Center" HorizontalContentAlignment="Center"  
                Content="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" Click="GetDataFromApi_OnClick"></Button>
        <TextBlock Name="DataFromApiTextBlock" Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" 
                   HorizontalAlignment="Center"></TextBlock>
        <Button Grid.Column="0" Grid.Row="1" Width="210" HorizontalAlignment="Center" 
                HorizontalContentAlignment="Center"
                Content="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞" Click="WriteInDoc_OnClick"></Button>
        <TextBlock Name="TestResultTextBlock" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" 
                   HorizontalAlignment="Center"></TextBlock>
    </Grid>
</Window>